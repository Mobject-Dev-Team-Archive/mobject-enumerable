<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="ForwardEnumeratorInterface_TestSuite" Id="{5e30d77d-5ab7-4a68-9932-9d53fc3729bd}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK PUBLIC ForwardEnumeratorInterface_TestSuite EXTENDS TcUnit.FB_TestSuite
VAR
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[CompileCheckWithMockForwardEnumerator_AllFalse();
CompileCheckWithMockForwardEnumerator_AllTrue();]]></ST>
    </Implementation>
    <Method Name="CompileCheckWithMockForwardEnumerator_AllFalse" Id="{53f28239-f13a-41de-aa9f-47d3ff4c2a4d}">
      <Declaration><![CDATA[METHOD PUBLIC CompileCheckWithMockForwardEnumerator_AllFalse
VAR
	mockForwardEnumerator : MockForwardEnumerator(isValidState := FALSE, moveNextState := FALSE, tryGetState := FALSE, tryGetToState := FALSE);
	forwardEnumerator : I_ForwardEnumerator := mockForwardEnumerator;
	destination : BOOL;
	isValidResult : BOOL;
	moveNextResult : BOOL;
	tryGetResult : BOOL;
	tryGetToResult : BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('CompileCheckWithMockForwardEnumerator_AllFalse');

// this test only checks to see if the test will compile using the mock.  The mock does not dispose. 
isValidResult := forwardEnumerator.IsValid;
moveNextResult := forwardEnumerator.MoveNext();
tryGetResult := forwardEnumerator.TryGet(destination);
tryGetToResult := forwardEnumerator.TryGetTo(ADR(destination),SIZEOF(destination));
forwardEnumerator.Dispose();

AssertFalse(
	Condition := isValidResult,
	Message := 'IsValid did not match the mock set value'
);

AssertFalse(
	Condition := moveNextResult,
	Message := 'MoveNext did not match the mock set value'
);

AssertFalse(
	Condition := tryGetResult,
	Message := 'TryGet did not match the mock set value'
);

AssertFalse(
	Condition := tryGetToResult,
	Message := 'TryGetTo did not match the mock set value'
);

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="CompileCheckWithMockForwardEnumerator_AllTrue" Id="{eb0f841d-9d7f-41ac-8a8f-85bb78097c3a}">
      <Declaration><![CDATA[METHOD PUBLIC CompileCheckWithMockForwardEnumerator_AllTrue
VAR
	mockForwardEnumerator : MockForwardEnumerator(isValidState := TRUE, moveNextState := TRUE, tryGetState := TRUE, tryGetToState := TRUE);
	forwardEnumerator : I_ForwardEnumerator := mockForwardEnumerator;
	destination : BOOL;
	isValidResult : BOOL;
	moveNextResult : BOOL;
	tryGetResult : BOOL;
	tryGetToResult : BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('CompileCheckWithMockForwardEnumerator_AllTrue');

// this test only checks to see if the test will compile using the mock.  The mock does not dispose. 
isValidResult := forwardEnumerator.IsValid;
moveNextResult := forwardEnumerator.MoveNext();
tryGetResult := forwardEnumerator.TryGet(destination);
tryGetToResult := forwardEnumerator.TryGetTo(ADR(destination),SIZEOF(destination));
forwardEnumerator.Dispose();

AssertTrue(
	Condition := isValidResult,
	Message := 'IsValid did not match the mock set value'
);

AssertTrue(
	Condition := moveNextResult,
	Message := 'MoveNext did not match the mock set value'
);

AssertTrue(
	Condition := tryGetResult,
	Message := 'TryGet did not match the mock set value'
);

AssertTrue(
	Condition := tryGetToResult,
	Message := 'TryGetTo did not match the mock set value'
);

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>